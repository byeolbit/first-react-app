{"version":3,"sources":["TodoListInputForm.js","TodoListItemList.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoListInputForm","react_default","a","createElement","onSubmit","this","props","onCreate","placeholder","value","currentItem","text","onChange","onInputChange","type","Component","TodoListItemList","_this","todoList","itemList","map","item","key","id","className","done","onClick","toggleState","TodoList","state","event","preventDefault","_this$state","setState","concat","target","src_TodoListInputForm","src_TodoListItemList","App","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAiBeA,mLAbX,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKC,MAAMC,UACzBN,EAAAC,EAAAC,cAAA,SACEK,YAAY,cACZC,MAAOJ,KAAKC,MAAMI,YAAYC,KAC9BC,SAAUP,KAAKC,MAAMO,gBAEvBZ,EAAAC,EAAAC,cAAA,UAAQW,KAAK,UAAb,aATwBC,aCmBjBC,mLAlBJ,IAAAC,EAAAZ,KAEDa,EADab,KAAKC,MAAjBa,SACmBC,IAAI,SAAAC,GAAI,OAChCpB,EAAAC,EAAAC,cAAA,MAAImB,IAAKD,EAAKE,GACVA,GAAIF,EAAKE,GACTC,WAAuB,IAAZH,EAAKI,KAAY,UAAU,cACtCC,QAAST,EAAKX,MAAMqB,aACrBN,EAAKV,QAGV,OACEV,EAAAC,EAAAC,cAAA,MAAIqB,UAAU,kBACXN,UAbsBH,aC2DhBa,6MAxDbL,GAAK,IACLM,MAAQ,CACNnB,YAAa,CAACC,KAAM,GAAIc,MAAM,GAC9BN,SAAU,MAGZZ,SAAW,SAACuB,GACVA,EAAMC,iBADc,IAAAC,EAGYf,EAAKY,MAA9BnB,EAHasB,EAGbtB,YAAaS,EAHAa,EAGAb,SACpBF,EAAKgB,SAAS,CACZvB,YAAa,CAACC,KAAM,GAAIc,MAAM,GAC9BN,SAAUA,EAASe,OAAO,CACxBX,GAAIN,EAAKM,IAAM,EACfZ,KAAMD,EAAYC,KAClBc,KAAMf,EAAYe,YAKxBZ,cAAgB,SAACiB,GACfb,EAAKgB,SAAS,CACZvB,YAAa,CACXC,KAAMmB,EAAMK,OAAO1B,MACnBgB,KAAMR,EAAKY,MAAMnB,YAAYe,WAKnCE,YAAc,SAACG,GACb,IAAMP,EAAKO,EAAMK,OAAOZ,GAAG,EACrBJ,EAAWF,EAAKY,MAAMV,SACtBM,GAAQN,EAASI,GAAIE,KAC3BN,EAASI,GAAIE,KAAOA,EACpBR,EAAKgB,SAAS,CACZd,SAAUA,6EAKZ,OACElB,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,aACbvB,EAAAC,EAAAC,cAACiC,EAAD,CACE7B,SAAUF,KAAKE,SACfM,cAAeR,KAAKQ,cACpBH,YAAaL,KAAKwB,MAAMnB,cAE1BT,EAAAC,EAAAC,cAACkC,EAAD,CACEV,YAAatB,KAAKsB,YAClBR,SAAUd,KAAKwB,MAAMV,mBAlDRJ,aCQRuB,0LANX,OACErC,EAAAC,EAAAC,cAACoC,EAAD,aAHYxB,cCQEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e7873535.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass TodoListInputForm extends Component {\n  render() {\n    return (\n      <form onSubmit={this.props.onCreate}>\n        <input\n          placeholder=\"Input here!\"\n          value={this.props.currentItem.text}\n          onChange={this.props.onInputChange}\n        />\n        <button type=\"submit\">+</button>\n      </form>\n    )\n  }\n}\n\nexport default TodoListInputForm","import React, { Component } from 'react'\n\nclass TodoListItemList extends Component {\n  render() {\n    const {itemList} = this.props;\n    const todoList = itemList.map(item => (\n      <li key={item.id}\n          id={item.id}\n          className={item.done===true?'checked':'not-checked'}\n          onClick={this.props.toggleState}>\n        {item.text}\n      </li>\n    ))\n    return (\n      <ul className=\"todo-item-list\">\n        {todoList}\n      </ul>\n    )\n  }\n}\n\nexport default TodoListItemList","import React, { Component } from 'react'\nimport TodoListInputForm from './TodoListInputForm'\nimport TodoListItemList from './TodoListItemList'\n\nclass TodoList extends Component {\n  id = 0;\n  state = {\n    currentItem: {text: '', done: false},\n    itemList: []\n  }\n  \n  onCreate = (event) => {\n    event.preventDefault();\n\n    const {currentItem, itemList} = this.state\n    this.setState({\n      currentItem: {text: '', done: false},\n      itemList: itemList.concat({\n        id: this.id += 1,\n        text: currentItem.text,\n        done: currentItem.done\n      })\n    })\n  }\n\n  onInputChange = (event) => {\n    this.setState({\n      currentItem: {\n        text: event.target.value,\n        done: this.state.currentItem.done\n      }\n    })\n  }\n\n  toggleState = (event) => {\n    const id = event.target.id-1;\n    const itemList = this.state.itemList;\n    const done = !itemList[id].done\n    itemList[id].done = done\n    this.setState({\n      itemList: itemList\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"todo-list\">\n        <TodoListInputForm\n          onCreate={this.onCreate}\n          onInputChange={this.onInputChange}\n          currentItem={this.state.currentItem}\n        />\n        <TodoListItemList\n          toggleState={this.toggleState}\n          itemList={this.state.itemList}\n        />\n      </div>\n    )\n  }\n}\n\nexport default TodoList","import React, { Component } from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <TodoList/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}